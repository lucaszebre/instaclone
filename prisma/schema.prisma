// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id                     String          @id @unique @default(uuid())
  username               String          @unique
  email                  String          @unique
  fullName               String?
  gender                 String?
  bio                    String?
  avatarkey              String?
  profilePictureUrl      String?
  isPrivate              Boolean         @default(false)
  joinedAt               DateTime        @default(now())
  isEmailVerified        Boolean         @default(false)
  posts                  Post[]
  following              FollowingList[] // Users that this user is following
  followers              FollowerList[] // Users that are following this user (as 'user')
  comments               Comment[]
  likes                  Like[]
  Conversations Conversation[]  @relation("initiatedConversations")
  receivedConversations  Conversation[]  @relation("receivedConversations")
  notifications          Notification[]
  stories                Story[]
  taggedPosts            UserTag[]
  userBlock              String[]
  userBLockme            String[]
  savePost               String[]
  savePostId             String?
}

model Post {
  id          String    @id @default(uuid())
  userId      String
  author      String    @default("kihura")
  user        User      @relation(fields: [userId], references: [id])
  imageUrl    String
  filekey    String?
  caption     String?
  location    String?
  postedAt    DateTime  @default(now())
  comments    Comment[]
  likes       Like[]
  tags        PostTag[]
  taggedUsers UserTag[]
  savePostId  String?
  filter String?
  bio String?
}




model PostTag {
  postId String @unique
  post   Post   @relation(fields: [postId], references: [id])

  tagId String @unique
  tag   Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Comment {
  id                 String    @id @default(uuid())
  postId             String
  post               Post      @relation(fields: [postId], references: [id])
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  content            String
  repliedToCommentId String?
  repliedToComment   Comment?  @relation("CommentToComment", fields: [repliedToCommentId], references: [id])
  replies            Comment[] @relation("CommentToComment")
  commentedAt        DateTime  @default(now())
}

model Like {
  postId  String
  post    Post     @relation(fields: [postId], references: [id])
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  likedAt DateTime @default(now())

  @@id([postId, userId])
}

model FollowerList {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  followerId String
  followedAt DateTime @default(now())

  @@unique([userId, followerId])
}

model FollowingList {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  followingId String
  followingAt DateTime @default(now())

  @@unique([userId, followingId])
}

model Tag {
  id    String    @id @default(uuid())
  name  String    @unique
  posts PostTag[]
}

model Conversation {
  id          String    @id @default(uuid())
  redisKey    String
  message     Message[]
  initiatorId String
  initiator   User      @relation("initiatedConversations", fields: [initiatorId], references: [id])
  recipientId String
  recipient   User   @relation("receivedConversations", fields: [recipientId], references: [id])
}

model Message {
  id             String        @id
  senderId       String
  text           String
  timestamp      DateTime
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String
  referenceId Int
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Story {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  imageUrl  String
  caption   String?
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())
}

model UserTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}
